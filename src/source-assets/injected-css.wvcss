:root {
  /*
   * - In vertical-rl text: 'block' = 'horizontal' and 'inline' = 'vertical'.
   * - In horizontal-lr text: 'block' = 'vertical' and 'inline' = 'horizontal'.
   */
  --paranovel-block-padding: 24px;
  --paranovel-inline-padding: 24px;
  --paranovel-font-size: 24px;

  --paranovel-popover-show-more-button-block-size: 32px;
  --paranovel-popover-inset-size: 8px;
  --paranovel-max-readable-inline-size: 600px;
  --paranovel-popover-minimum-inline-size: 200px;
  --paranovel-popover-minimum-block-size: 100px;
  --paranovel-popover-background-color: #222;

  --paranovel-popover-definition-font-size: 14px;
}

::highlight(word) {
  color: black;
  background-color: yellow;
}

/* Workaround for WebKit bug. See comments in injected-javascript.wvjs. */
rt {
  /* The workaround is opt-out, rather than opt-in. */
  isolation: isolate;
}

* {
  /*
    Prevent double-tap from zooming and centring on the element (e.g. <button>
    elements). The zoom cancellation is redundant with the "user-scalable=no"
    option specified in our <meta> tag, but the centring cancellation isn't.

    In practice, this doesn't seem to work in some (if not all) cases.
  */
  touch-action: pan-x pan-y;
}

html,
body {
  margin: 0 !important;
  padding: 0 !important;
  inline-size: 100% !important;
  /*
    Due to an iOS Safari bug, we have to force the <html> and/or <body> to be
    horizontal-tb, otherwise when the popover dictionary overflows, it can't be
    scrolled.
    @see https://bsky.app/profile/shirakaba.bsky.social/post/3lhvtwmr7fc2v

    Update 1: Even worse, `position: fixed` simply doesn't display on
    vertical-rl. And even using the Popover API doesn't circumvent that.

    Update 2: It seems Safari 18 is less buggy with vertical text than Safari
    26.
  */
  /* writing-mode: horizontal-tb !important; */
}

html {
  max-inline-size: none !important;
  /* As the WebView bounces={false} prop is broken */
  overscroll-behavior: none;
}

body {
  position: relative !important;
  box-sizing: border-box !important;
  padding-block: var(--paranovel-block-padding) !important;
  padding-inline: var(--paranovel-inline-padding) !important;
  /* Would be nice to use overflow-inline once supported. */
  overflow-x: hidden;
  font-size: var(--paranovel-font-size) !important;
}

div:has(img) {
  height: auto !important;
}

img,
svg {
  /* Stop images sizing to their container  */
  block-size: auto !important;

  /* Prevent images from dictating the height of the whole page. */
  max-inline-size: 100% !important;
}

#paranovel-progress {
  position: fixed;
  /* Based on the User Agent default */
  --block-size: 1em;

  /* Place the progress bar centrally in top padding box */
  top: calc((var(--paranovel-inline-padding) - var(--block-size)) / 2);
  margin-inline: auto;
  left: 0;
  right: 0;
  writing-mode: horizontal-tb;
  block-size: var(--block-size);
  inline-size: calc(100% - 2rem);

  /* Hide until we've been updated with our first value. */
  visibility: hidden;
}

#paranovel-anchor {
  /* Avoid this interfering with click-to-define */
  pointer-events: none;
  position: fixed;
  /* outline: 1px solid red; */
}

.anchor {
  background-color: aqua;
}

#paranovel-popover {
  /*
    Resets many polluting styles, likely from the ebook, that are somehow not
    visible in the WebKit inspector.
  */
  all: initial;

  position: fixed;
  inset: 0;
  /* background-color: rgba(0, 0, 0, 0.1); */
  /* padding: 1rem; */
  touch-action: none;
  box-sizing: border-box;
  display: block;

  touch-action: none;
}
#paranovel-popover:not([data-open]) {
  display: none;
}
body.modal {
  /* Prevents pan gestures on the popover from scrolling the document. */
  overflow: hidden;
}

#paranovel-popover-stage {
  position: absolute;
  display: flex;
  inset: 0;
  padding: 1rem;
  align-items: center;
}

#paranovel-popover-content {
  background: black;
  color: white;
  padding: 0.5rem;
  font-size: 50px;

  /* border: 2px solid red; */
  box-sizing: border-box;
  overflow: auto;
  overscroll-behavior: contain;

  max-inline-size: min(100%, 500px);
  block-size: fit-content;
  max-block-size: 100%;
}
body:has(:popover-open) {
  overflow: hidden;
}
body:has(dialog[open]) {
  overflow: hidden;
}

#paranovel-popover.size-to-first-result-container
  > .paranovel-result-container:not(:first-child) {
  display: none;
}

.paranovel-result-container {
  display: flex;
  flex-direction: column;
  gap: 8px;
  align-items: flex-start;
}

.paranovel-headword {
  color: white;
  font-size: 22px;
  margin: 0;
}

.paranovel-reading-item {
  margin: 0;
  color: white;
  font-size: var(--paranovel-popover-definition-font-size);
}

.paranovel-sense-list {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.paranovel-sense-item {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 8px;
  font-size: var(--paranovel-popover-definition-font-size);
}

.paranovel-pos-list {
  display: flex;
  flex-direction: row;
  gap: 8px;
  margin: 0;
  padding: 0;
  list-style: none;
}

.paranovel-pos-item {
  color: white;
  border-width: 1px;
  border-style: solid;
  border-color: grey;
  border-radius: 4px;
  padding-left: 4px;
  padding-right: 4px;
  font-size: var(--paranovel-popover-definition-font-size);
}

.paranovel-gloss-item {
  margin: 0;
  color: white;
  font-size: var(--paranovel-popover-definition-font-size);
}

.paranovel-show-more-container {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: var(--paranovel-popover-show-more-button-block-size);
  display: flex;
  align-items: center;
  justify-content: center;
  /* TODO: base this on var(--paranovel-popover-background-color) */
  background-color: #2228;
}

.paranovel-show-more-button {
  /* TODO */
}

#paranovel-popover.with-show-more-button {
  overflow-y: hidden;
}
#paranovel-popover .paranovel-show-more-container {
  display: none;
}
#paranovel-popover.with-show-more-button .paranovel-show-more-container {
  display: flex;
}
